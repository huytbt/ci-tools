#!/usr/bin/env node

const execSync = require('child_process').execSync;
const spawnSync = require('child_process').spawnSync;

const getParams = () => {
  let params = {};
  process.argv.forEach((arg) => {
    const args = arg.split('=');
    params[args[0]] = args.length > 1 ? args[1] : null;
  });
  return params;
};

const checkBranchName = async () => {
  const branches = await execSync('git branch');

  const branch = await spawnSync('grep', ['*'], { input: branches });
  if (branch.error) {
    throw branch.error;
  }
  const currentBranch = branch.stdout.toString().trim().replace('* ', '');

  console.log('Checking branch name: \x1b[35m' + currentBranch + '\x1b[0m');

  const currentBranchNames = currentBranch.split('/');
  const type = currentBranchNames[0];
  const scope = currentBranchNames.length > 1 ? currentBranchNames[1] : '';
  const subject = currentBranchNames.length > 2 ? currentBranchNames[2] : '';

  if (['master', 'develop', 'feat', 'hotfix', 'fix', 'docs', 'style', 'refactor', 'test', 'chore', 'release'].indexOf(type) < 0) {
    console.log('\x1b[31mBranch name is invalid.\x1b[0m');
    throw new Error(1);
  }

  if (['master', 'develop'].indexOf(type) < 0 && (!scope || !subject)) {
    console.log('\x1b[31mBranch name MUST contains scope and subject.\x1b[0m');
    console.log('  Format: \x1b[32m' + type + '/scope/short-useful-descriptive-subject \x1b[0m');
    throw new Error(1);
  }

  console.log('\x1b[32mDone!\x1b[0m\n');
  return currentBranch;
};

const checkCommitMessages = async (currentBranch) => {
  console.log('Checking commits messages');

  const params = getParams();
  const mainBranch = params['--branch'] ? params['--branch'] : 'master';

  await spawnSync('git', ['remote', 'set-branches', 'origin', mainBranch]);
  await spawnSync('git', ['fetch', 'origin', mainBranch]);
  await spawnSync('git', ['checkout', mainBranch]);
  await spawnSync('git', ['checkout', currentBranch]);
  const logs = await spawnSync('git', ['log', '--pretty=format:\"**------**\n%B\"', mainBranch + '..' + currentBranch]);
  console.log(logs.stdout.toString());
};

const run = async () => {
  const currentBranch = await checkBranchName();
  await checkCommitMessages(currentBranch);
};

run()
  .then(() => process.exit(0))
  .catch(process.exit);
